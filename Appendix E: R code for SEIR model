#Load required libraries
library(epimdr)
library(ggplot2)
library(deSolve)
library(reshape2)

#ODE 
library(deSolve)

#Graphs and Data Manipulation
library(tidyverse)
library(data.table)

#Confusion Matrix
library(caret) 

#Persistent Homology
library(nonlinearTseries)
library(TDAstats)

#Betti Numbers
library(matrixStats)

#databinding
library(dplyr)


#SEIR Model
seirmod = function(t, y, parms) {
  S = y[1]
  E = y[2]
  I = y[3]
  R = y[4] 
  mu = parms["mu"]
  N = parms["N"]
  beta = parms["beta"]
  sigma = parms["sigma"]
  gamma = parms["gamma"]
  dS = mu * (N - S) - beta * S * I/N
  dE = beta * S * I/N - (mu + sigma) * E
  dI = sigma * E - (mu + gamma) * I
  dR = gamma * I - mu * R
  res = c(dS, dE, dI, dR)
  list(res)
}
require(deSolve)
times = seq(0, 10, by=1/120)
paras = c(mu = 1/50, N = 1, beta = 1000,
          sigma = 365/8, gamma = 365/5)
start = c(S=0.06, E=0, I=0.0001, R = 0.939)

R0 = expression(sigma/(sigma + mu) * beta/(gamma + mu))
with(as.list(paras), eval(R0))
out = as.data.table(ode(start, times, seirmod, paras))
par(mfrow = c(1,2)) #Two plots side by side
plot(times, out$I, ylab = "Infected",
     xlab = "Time", type = "l")

#Create data frame consisting of row vectors of output from SIR model
OnePeakData <- data.frame()

Amount <- as.data.frame(out) %>% select(I)  #change SIR in select as desired
transposeAmount<-t(Amount)
OnePeakData <- rbind.data.frame(transposeAmount,OnePeakData)

#Apply Takens Embedding, calculate homology and determine if persistent for One Peak
homology <- data.frame()
for (i in 1:1){
  x<- data.matrix(OnePeakData[i,])
  a<- buildTakens(x,2,3)
  plot(a)
  hom <- calculate_homology(a,return_df = TRUE)
  hom <- hom %>%
    mutate(persistence = death-birth) %>%
    mutate(persistent = ifelse(persistence > max(persistence)-0.00001, 1,0))
  hom_matrix <- data_frame(hom) %>% select(dimension, persistent)
  hom_matrix <- as.data.frame(hom_matrix) 
  p1 <- hom_matrix[hom_matrix$persistent == '1',] 
  homology <- rbind.data.frame(homology,p1) 
}
